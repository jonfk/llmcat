#!/bin/bash

# Config
set -eo pipefail
CLIP_CMD=""
VERSION="2.0.0"
QUIET="true"
DEBUG="false"
TREE_ONLY="false"
FILE_COUNT=0  # Initialize the file counter

# Help text
show_help() {
    cat << EOF
llmcat - Prepare files and directories for LLM consumption

Usage: llmcat [options] [path]
       llmcat (interactive mode with fzf)

Options:
    -h, --help              Show this help message
    -i, --ignore PATTERN    Additional ignore patterns (fd exclude format: glob pattern)
    -v, --version           Show version
    -t, --tree-only         Only output directory tree (uses current directory if no directory is specified)
    -q, --quiet             Silent mode (only copy to clipboard)
    -p, --print             Print copied files/content (default: quiet)
    -n, --no-ignore         Don't respect gitignore/ignore files
    -H, --hidden            Include hidden files/directories
    --debug                 Enable debug output

Interactive Mode (fzf):
    tab          - Select/mark multiple files
    shift-tab    - Unselect/unmark file
    ctrl-/       - Toggle preview window
    ctrl-d       - Select directory mode
    ctrl-f       - Select file mode
    enter        - Confirm selection(s)
    esc          - Exit

Examples:
    # Interactive file selection
    llmcat

    # Process specific file
    llmcat path/to/file.txt

    # Process directory with custom ignore
    llmcat -i "*.log" -i "*.tmp" ./src/

    # Print content while copying
    llmcat -p ./src/file.txt

    # Print only directory tree of current directory
    llmcat -t

    # Print only directory tree of specified directory
    llmcat -t path/to/directory

Features:
    - Interactive fuzzy finder with file preview
    - Auto-copies output to clipboard
    - Automatically respects .gitignore, .ignore, and .fdignore files
    - Directory tree visualization
    - Multi-file selection
    - Cross-platform (Linux/OSX)

Behavior Changes from v1.x:
    - Uses fd instead of find, automatically respecting .gitignore files
    - Hidden files/directories are excluded by default (unlike find)
    - Match patterns now use fd's syntax instead of grep patterns

Author:
    Azer Koculu (https://azerkoculu.com)

See Also:
    Project Home:
      https://github.com/azer/llmcat
EOF
}

# Debug helper
debug() {
    if [ "$DEBUG" = "true" ]; then
        printf "DEBUG: %s\n" "$*" >&2
    fi
}

# Detect OS and set clipboard command
detect_os() {
    case "$(uname)" in
        "Darwin")
            CLIP_CMD="pbcopy"
            command -v pbcopy >/dev/null 2>&1 || {
                echo "Error: pbcopy not found" >&2
                exit 1
            }
            ;;
        "Linux")
            if command -v wl-copy >/dev/null 2>&1; then
                CLIP_CMD="wl-copy"
            elif command -v xclip >/dev/null 2>&1; then
                CLIP_CMD="xclip -selection clipboard"
            elif command -v xsel >/dev/null 2>&1; then
                CLIP_CMD="xsel --clipboard --input"
            else
                echo "Error: Install xclip or xsel for clipboard support" >&2
                exit 1
            fi
            ;;
        *)
            echo "Error: Unsupported OS" >&2
            exit 1
            ;;
    esac
}

# Find git root or current directory
find_root() {
    if git rev-parse --git-dir >/dev/null 2>&1; then
        git rev-parse --show-toplevel
    else
        pwd
    fi
}

# Check for dependencies
check_dependencies() {
    local missing=false

    if ! command -v fd >/dev/null 2>&1; then
        echo "Interactive mode requires fd. Install with:"
        echo "  brew install fd    # macOS"
        echo "  apt install fd-find     # Ubuntu (available as 'fdfind')"
        echo "  https://github.com/sharkdp/fd#installation"
        missing=true
    fi

    if ! command -v fzf >/dev/null 2>&1; then
        echo "Interactive mode requires fzf. Install with:"
        echo "  brew install fzf    # macOS"
        echo "  apt install fzf     # Ubuntu"
        echo
        missing=true
    fi

    [ "$missing" = "true" ] && return 1 || return 0
}

# Run fzf with configuration
run_fzf() {
    local fd_opts="$1"
    local root_dir
    root_dir=$(find_root)

    debug "Running fzf from: $root_dir"

    # Preview script to handle files vs directories
    local preview_cmd='
        if [ -f {} ]; then
            bat --style=numbers --color=always {} 2>/dev/null || cat {}
        elif [ -d {} ]; then
            echo "\n  Directory: {}\n"
            tree -C {} 2>/dev/null || ls -la {} 2>/dev/null
        fi'

    # Change to root directory temporarily
    (cd "$root_dir" && {
        local fd_cmd="fd . --color=never $fd_opts"
        
        debug "Fd command: $fd_cmd"

        # Execute fd command and pipe to fzf, adding the current directory
        # to maintain original behavior
        (echo "."; eval "$fd_cmd") | fzf \
            --preview "$preview_cmd" \
            --preview-window 'right:60%:border-left' \
            --bind 'ctrl-/:toggle-preview' \
            --bind "ctrl-d:change-prompt(Select directories > )+reload(echo \".\"; fd . --type directory --color=never $fd_opts)" \
            --bind "ctrl-f:change-prompt(Select files > )+reload(fd . --type file --color=never $fd_opts)" \
            --bind 'tab:toggle+up' \
            --height '80%' \
            --border=rounded \
            --prompt 'âš¡ Select files/dirs > ' \
            --multi \
            --color 'fg+:252,bg+:-1,hl:148,hl+:154,pointer:032,marker:010,prompt:064,border:240,separator:240'
    })
}

# Get relative path from root
get_relative_path() {
    local path="$1"
    local root_dir
    root_dir=$(find_root)
    echo "${path#$root_dir/}"
}

# Process file content
process_file() {
    local file="$1"
    local rel_path
    rel_path=$(get_relative_path "$file")
    # Note: Don't increment counter here since this runs in a subshell
    {
        echo "## File: $rel_path"
        echo "---"
        cat "$file"
        echo
    }
}

# Process directory content
process_dir() {
    local dir="$1"
    local fd_opts="$2"
    local rel_path
    rel_path=$(get_relative_path "$dir")

    {
        echo "# Directory: $rel_path"
        echo "---"
        echo

        # Tree output
        local tree_output
        if command -v tree >/dev/null 2>&1; then
            # Use tree command if available with ignore patterns
            tree_output=$(cd "$dir" && tree)
        else
            # Use fd to simulate a tree view
            local fd_tree_cmd="cd \"$dir\" && fd . --color=never $fd_opts"
            
            # Create tree-like output with sed
            tree_output=$(eval "$fd_tree_cmd" | sed -e "s/[^-][^\/]*\// |--/g" -e "s/|\([^ ]\)/|-\1/")
        fi
        echo "$tree_output"

        # Process files only if not tree_only
        if [ "$TREE_ONLY" != "true" ]; then
            # Find all files with fd
            local fd_files_cmd="cd \"$dir\" && fd . --type file --color=never $fd_opts"
            
            # Process each file
            eval "$fd_files_cmd" | while IFS= read -r file; do
                echo
                process_file "$dir/$file"
            done
        fi
    }
}

# Handle output
output_handler() {
    local content="$1"

    # Copy to clipboard
    echo -n "$content" | eval "$CLIP_CMD"

    # Print if not quiet or if it's tree-only mode
    if [ "$QUIET" = "false" ] || [ "$TREE_ONLY" = "true" ]; then
        echo "$content"
    fi

    # Show feedback only for file copies, not tree-only mode
    if [ "$TREE_ONLY" != "true" ]; then
        echo "Copied $FILE_COUNT file(s) to clipboard" >&2
    fi
}

# Process multiple targets
process_targets() {
    local fd_opts="$1"
    shift

    local output=""
    local target
    
    # Reset file counter before processing
    FILE_COUNT=0
    
    for target in "$@"; do
        debug "Processing: $target"
        if [ -f "$target" ]; then
            FILE_COUNT=$((FILE_COUNT + 1))
            output+="$(process_file "$target")"
        elif [ -d "$target" ]; then
            # For directories, we need to count the files inside
            if [ "$TREE_ONLY" != "true" ]; then
                # Count files in directory
                local file_count_in_dir
                file_count_in_dir=$(cd "$target" && fd . --type file --color=never $fd_opts | wc -l)
                FILE_COUNT=$((FILE_COUNT + file_count_in_dir))
            fi
            output+="$(process_dir "$target" "$fd_opts")"
        else
            echo "Warning: Target not found - $target" >&2
            continue
        fi
        output+=$'\n\n'
    done

    output_handler "$output"
}

main() {
    local fd_opts=""
    local targets=()

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help) show_help; exit 0 ;;
            -v|--version) echo "llmcat version $VERSION"; exit 0 ;;
            -i|--ignore) 
                fd_opts+=" --exclude \"$2\""; 
                shift 2 ;;
            -n|--no-ignore) 
                fd_opts+=" --no-ignore"; 
                shift ;;
            -H|--hidden) 
                fd_opts+=" --hidden"; 
                shift ;;
            -t|--tree-only) 
                TREE_ONLY="true"; 
                QUIET="false";  # Always print when in tree-only mode
                shift ;;
            -q|--quiet) 
                QUIET="true"; 
                shift ;;
            -p|--print) 
                QUIET="false"; 
                shift ;;
            --debug) 
                DEBUG="true"; 
                shift ;;
            *) 
                targets+=("$1"); 
                shift ;;
        esac
    done

    detect_os

    # If tree-only mode is enabled and no targets, use current directory
    if [ "$TREE_ONLY" = "true" ] && [ ${#targets[@]} -eq 0 ]; then
        debug "Tree-only mode with no targets, using current directory"
        targets+=(".")
    fi

    # Interactive mode if no targets
    if [ ${#targets[@]} -eq 0 ]; then
        debug "Starting interactive mode"
        if check_dependencies; then
            debug "Running fzf selection"
            local selected
            selected=$(run_fzf "$fd_opts")

            if [ -n "$selected" ]; then
                debug "Processing selection"
                while IFS= read -r line; do
                    [ -n "$line" ] && targets+=("$line")
                done <<< "$selected"
            else
                debug "No selection made"
                exit 0
            fi
        else
            exit 1
        fi
    fi

    if [ ${#targets[@]} -gt 0 ]; then
        debug "Processing ${#targets[@]} targets"
        process_targets "$fd_opts" "${targets[@]}"
    fi
}

main "$@"
